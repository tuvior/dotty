/** Decompiled from out/posTestFromTasty/pos/i2104b/Cons.tasty */
trait Cons[+H, +T]() extends java.lang.Object
object Cons {
  def apply[H, T](h: H, t: T): Cons[H, T] = scala.Predef.???
  def unapply[H, T](t: Cons[H, T]): scala.Option[Pair[H, T]] = scala.Predef.???
}
/** Decompiled from out/posTestFromTasty/pos/i2104b/Pair.tasty */
case class Pair[A, B](_1: A, _2: B) {
  override def hashCode(): scala.Int = {
    var acc: scala.Int = 2479866
    acc = scala.runtime.Statics.mix(acc, scala.runtime.Statics.anyHash(Pair.this._1))
    acc = scala.runtime.Statics.mix(acc, scala.runtime.Statics.anyHash(Pair.this._2))
    scala.runtime.Statics.finalizeHash(acc, 2)
  }
  override def equals(x$0: scala.Any): scala.Boolean = Pair.this.eq(x$0.asInstanceOf[java.lang.Object]).||(x$0 match {
    case x$0: Pair[A, B] @scala.unchecked =>
      Pair.this._1.==(x$0._1).&&(Pair.this._2.==(x$0._2))
    case _ =>
      false
  })
  override def toString(): java.lang.String = scala.runtime.ScalaRunTime._toString(Pair.this)
  override def canEqual(that: scala.Any): scala.Boolean = that.isInstanceOf[Pair[A, B] @scala.unchecked]
  override def productArity: scala.Int = 2
  override def productPrefix: java.lang.String = "Pair"
  override def productElement(n: scala.Int): scala.Any = n match {
    case 0 =>
      Pair.this._1
    case 1 =>
      Pair.this._2
    case _ =>
      throw new java.lang.IndexOutOfBoundsException(n.toString())
  }
}
object Pair extends scala.AnyRef
/** Decompiled from out/posTestFromTasty/pos/i2104b/Test.tasty */
object Test {
  def main(args: scala.Array[scala.Predef.String]): scala.Unit = Cons.apply[scala.Option[scala.Int], scala.None.type](scala.Option.apply[scala.Int](1), scala.None) match {
    case Cons(scala.Some(i), scala.None) =>
      ()
  }
}
