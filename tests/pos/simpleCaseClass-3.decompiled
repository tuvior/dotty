/** Decompiled from out/posTestFromTasty/pos/simpleCaseClass-3/A.tasty */
case class A[T](x: T) {
  override def hashCode(): scala.Int = {
    var acc: scala.Int = 65
    acc = scala.runtime.Statics.mix(acc, scala.runtime.Statics.anyHash(A.this.x))
    scala.runtime.Statics.finalizeHash(acc, 1)
  }
  override def equals(x$0: scala.Any): scala.Boolean = A.this.eq(x$0.asInstanceOf[java.lang.Object]).||(x$0 match {
    case x$0: A[T] @scala.unchecked =>
      A.this.x.==(x$0.x)
    case _ =>
      false
  })
  override def toString(): java.lang.String = scala.runtime.ScalaRunTime._toString(A.this)
  override def canEqual(that: scala.Any): scala.Boolean = that.isInstanceOf[A[T] @scala.unchecked]
  override def productArity: scala.Int = 1
  override def productPrefix: java.lang.String = "A"
  override def productElement(n: scala.Int): scala.Any = n match {
    case 0 =>
      A.this._1
    case _ =>
      throw new java.lang.IndexOutOfBoundsException(n.toString())
  }
}
object A extends scala.AnyRef